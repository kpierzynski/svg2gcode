case 'm':
			relative_gcode();
		case 'M':
		{
			int cnt = 0;

			while ((next = parse_points(next, &p)))
			{
				printf("; point.x: %f, point.y: %f\r\n", p.x, p.y);

				if (cnt == 0)
				{
					printf("G0 X%f Y%f Z%f F3600 ; cmd: %c\r\n", p.x, p.y, 0.0, delim);
					origin = (delim == 'm') ? point_add(last, p) : p;
					last = origin;
				}
				else
				{
					printf("G1 X%f Y%f Z%f E%d ; cmd: %c\r\n", p.x, p.y, 0.0, e += e_delta, delim);
				}
				cnt++;
			}
			absolute_gcode();
			break;
		}

		case 'l':
			relative_gcode();
		case 'L':
		{
			while ((next = parse_points(next, &p)))
			{
				printf("G1 X%f Y%f Z%f E%d ; cmd: %c\r\n", p.x, p.y, 0.0, e += e_delta, delim);
				last = (delim == 'l') ? point_add(last, p) : p;
			}
			absolute_gcode();
			break;
		}

		case 'z':
		case 'Z':
		{
			printf("G1 X%f Y%f Z%f E%d ; cmd: %c\r\n", origin.x, origin.y, 0.0, e += e_delta, delim);
			last = origin;
			break;
		}

		case 'h':
			relative_gcode();
		case 'H':
		{
			float c;
			while ((next = parse_coord(next, &c)))
			{
				// printf("G1 X%f Y%f Z%f E%d ; (c=%f, next:%s) cmd h\r\n", c, last.y, 0.0, e += e_delta, c, next);
				printf("G1 X%f Z%f E%d ; cmd: %c\r\n", c, 0.0, e += e_delta, delim);
				last.x = (delim == 'h') ? last.x + c : c;
			}
			absolute_gcode();
			break;
		}

		case 'v':
			relative_gcode();
		case 'V':
		{
			float c;
			while ((next = parse_coord(next, &c)))
			{
				// printf("G1 X%f Y%f Z%f E%d ; (c=%f, next:%s) cmd h\r\n", c, last.y, 0.0, e += e_delta, c, next);
				printf("G1 Y%f Z%f E%d ; cmd: %c\r\n", c, 0.0, e += e_delta, delim);
				last.y = (delim == 'v') ? last.y + c : c;
			}
			absolute_gcode();
			break;
		}

		case 'C':
		{
			Point p1, p2, p3;

			while ((next = parse_cub(next, &p1, &p2, &p3)))
			{
				float delta = 0.1;
				printf("; p0.x: %f, p0.y: %f, p1.x: %f, p1.y: %f, p2.x: %f, p2.y: %f, p3.x: %f, p3.y: %f\r\n", last.x, last.y, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y);

				for (float t = 0; t <= 1.0f; t += delta)
				{
					Point res = cubic_bezier(last, p1, p2, p3, t);
					printf("G1 X%f Y%f Z%f E%d ; cmd: %c\r\n", res.x, res.y, 0.0, e += e_delta, delim);
				}
				last = p3;
				second_control = p2;
				printf("G1 X%f Y%f Z%f E%d ; cmd: %c\r\n", last.x, last.y, 0.0, e += e_delta, delim);
			}
			absolute_gcode();
			break;
		}

		case 'c':
		{
			Point p1, p2, p3;
			while ((next = parse_cub(next, &p1, &p2, &p3)))
			{
				float delta = 0.1;
				// fprintf(stderr, "; p0.x: %f, p0.y: %f, p1.x: %f, p1.y: %f, p2.x: %f, p2.y: %f, p3.x: %f, p3.y: %f\r\n", last.x, last.y, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y);
				// fprintf(stderr, ";last: %f %f\r\n", last.x, last.y);

				for (float t = 0; t <= 1.0f; t += delta)
				{
					Point res = cubic_bezier((Point){0, 0}, p1, p2, p3, t);
					res = point_add(res, last);
					printf("G1 X%f Y%f Z%f E%d ; cmd: %c\r\n", res.x, res.y, 0.0, e += e_delta, delim);
				}
				second_control = point_add(last, p2);
				last = point_add(last, p3);

				printf("G1 X%f Y%f Z%f E%d ; cmd: %c\r\n", last.x, last.y, 0.0, e += e_delta,delim);
			}
			absolute_gcode();
			break;
		}

		case 's':
		{
			Point p1, p2;
			if (second_control.x == 0 && second_control.y == 0)
				second_control = last;
			while ((next = parse_ref_cub(next, &p1, &p2)))
			{
				float delta = 0.1;
				Point reflected = point_reflection(point_subtract(second_control, last), (Point){0, 0});
				for (float t = 0; t <= 1.0f; t += delta)
				{
					Point res = cubic_bezier((Point){0, 0}, reflected, p1, p2, t);
					res = point_add(res, last);
					printf("G1 X%f Y%f Z%f E%d ; cmd: %c\r\n", res.x, res.y, 0.0, e += e_delta, delim);
				}
				second_control = point_add(last, p1);
				last = point_add(last, p2);

				printf("G1 X%f Y%f Z%f E%d ; cmd: %c\r\n", last.x, last.y, 0.0, e += e_delta, delim);
			}
			absolute_gcode();
			break;
		}

		case 'S':
		{
			Point p1, p2;
			if (second_control.x == 0 && second_control.y == 0)
				second_control = last;
			while ((next = parse_ref_cub(next, &p1, &p2)))
			{
				float delta = 0.1;
				Point reflected = point_reflection(second_control, last);
				fprintf(stderr, "last: %f %f\r\n", last.x, last.y);
				fprintf(stderr, "reflected: %f %f\r\n", reflected.x, reflected.y);
				fprintf(stderr, "second_control: %f %f\r\n", second_control.x, second_control.y);
				for (float t = 0; t <= 1.0f; t += delta)
				{
					Point res = cubic_bezier(last, reflected, p1, p2, t);
					printf("G1 X%f Y%f Z%f E%d ; cmd: %c\r\n", res.x, res.y, 0.0, e += e_delta, delim);
				}
				last = p2;
				second_control = p1;
				printf("G1 X%f Y%f Z%f E%d ; cmd: %c\r\n", last.x, last.y, 0.0, e += e_delta, delim);
			}
			absolute_gcode();
			break;
		}

		case 'a':
		{
			Endpointic arc_data;
			while ((next = parse_arc(next, &arc_data)))
			{
				Centric arc = endpoint2center_parametrization(last, point_add(arc_data.p, last), arc_data.r, arc_data.angle, arc_data.fa, arc_data.fs);

				printf("; px: %f py: %f rx: %f ry: %f angle: %f fa: %d fs: %d \r\n", arc_data.p.x, arc_data.p.y, arc_data.r.x, arc_data.r.y, arc_data.angle, arc_data.fa, arc_data.fs);
				printf( "; rx: %f ry: %f cx: %f cy: %f delta: %f theta: %f\r\n", arc.r.x, arc.r.y, arc.c.x, arc.c.y, arc.delta, arc.theta);
				float t = arc.theta;

				if (arc.theta == arc.delta)
					arc_data.fs = 1;

				float x, y;

				if (!arc_data.fs)
				{
					t = -t;
					arc.theta = -arc.theta;
					arc.delta = -arc.delta;
				}

				while (t < arc.theta + arc.delta)
				{
					x = arc.r.x * cos(t) + arc.c.x;
					y = arc.r.y * sin(t) + arc.c.y;
					printf("G1 X%f Y%f Z%f, E%d ; cmd: %c\r\n", x, y, 0.0, e += e_delta, delim);

					t += 0.1;
				}

				last = (Point){x, y};
			}

			absolute_gcode();
			break;
		}

		default:
			fprintf(stderr, "UNHANDLED COMMAND: %c\r\n", delim);
			break;